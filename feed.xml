<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jean Carlo Emer</title>
    <description>Website e blog do desenvolvedor web Jean Carlo Emer</description>
    <link>http://jcemer.com</link>
    <atom:link href="http://jcemer.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Live posting do segundo dia da JSConfUY - parte 2</title>
        <description>&lt;p&gt;Cobertura comentada da tarde do segundo dia da JSConfUY 2014. Saiba que também há cobertura do &lt;a href=&quot;primeiro-dia-jsconf-uy.html&quot;&gt;primeiro dia&lt;/a&gt; e da &lt;a href=&quot;segundo-dia-jsconf-uy-parte-1.html&quot;&gt;primeira parte deste mesmo dia de evento&lt;/a&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;A-future-called-Web-Components-Zeno-Rocha&quot;&gt;
                &lt;a name=&quot;A-future-called-Web-Components-Zeno-Rocha&quot; href=&quot;#A-future-called-Web-Components-Zeno-Rocha&quot;&gt;&lt;/a&gt;A future called Web Components - Zeno Rocha
              &lt;/h2&gt;
            
&lt;p&gt;Zeno Rocha, nosso Paul Irish do Brasil, começou com sua predição de que todos os projetos &lt;em&gt;client-sides&lt;/em&gt; estão fadados ao fracasso. Sua opinião é logo justificada com o surgimento de &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, &lt;code&gt;document.querySelector()&lt;/code&gt; e &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt;&lt;/code&gt; que abalaram o mercado do Flash, jQuery e JQueryUI, respectivamente.&lt;/p&gt;

&lt;p&gt;Temos uma quantidade incrível de &lt;em&gt;frameworks&lt;/em&gt; e bibliotecas &lt;em&gt;front-end&lt;/em&gt; atualmente, e todas elas são baseadas em seus próprios pequenos módulos. Sempre que precisamos de algo novo, vamos direto aos buscadores e testamos (com muito pouco sucesso) uma infinidade de &lt;em&gt;plugins&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;WebComponents permitem criar novos componentes ou extender outros elementos com novas funcionalidades. WebComponents é termo mestre para as seguintes tecnologias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;CustomElements&lt;/em&gt;: permitem definir um novo elemento através de JavaScript já prevendo uma série de comportamentos. A especificação ainda está em rascunho e por isto é preciso usar &lt;em&gt;polyfills&lt;/em&gt; como &lt;a href=&quot;http://www.polymer-project.org&quot;&gt;Polymer&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Templates&lt;/em&gt;: Todos sabemos que a tarefa de definir &lt;em&gt;templates&lt;/em&gt; em HTML é um tanto arriscada. Principalmente porque o conteúdo será processado podendo requisitar recursos. Por tal motivo é que encapsulamos &lt;em&gt;templates&lt;/em&gt; com &lt;code&gt;&amp;lt;script type=&amp;quot;template&amp;quot;&amp;gt;&lt;/code&gt;. A especificação de &lt;em&gt;Template&lt;/em&gt; é a solução definitiva.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;ShadowDOM&lt;/em&gt;: diz respeito a como os navegadores escondem os detalhes de implementação de um elemento. A especificação nos dá acesso a esta abstração permitindo, por exemplo, que possamos definir estilos próprios para este conteúdo. Adeus a todos os &lt;em&gt;namespaces&lt;/em&gt; e dificuldades de organização de &lt;em&gt;CSS&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;imports&lt;/em&gt;: permitem incluir recursos externos aos documentos, assim como fazemos no &lt;em&gt;back-end&lt;/em&gt; das aplicações.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É preciso ter maturidade e conhecimento para entender que, mesmo com todas estas funcionalidades, não devemos criar uma aplicação inteira utilizando uma única &lt;em&gt;tag&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Inspirado em repositórios de código e componentes como NPM e Bower, Zeno juntou uma &lt;em&gt;turma da pesada&lt;/em&gt; e lançou o projeto &lt;a href=&quot;http://customelements.io&quot;&gt;Custom Elements&lt;/a&gt;. O que segue é a apresentação de alguns destes componentes.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;É fantástico como Zeno consegue inspirar a galera e instigar o crescimento de todas as comunidades pelas quais ele passa. A palestra é perfeita em apontar desafios que temos nos tempos atuais e apresentar interessantes evoluções.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WebComponents&lt;/em&gt; e um conjunto de especificações que ainda precisam amadurecer e fugir do alvo de disputadas como esta da &lt;a href=&quot;http://trac.webkit.org/changeset/164131&quot;&gt;Apple que removeu o suporte&lt;/a&gt; de &lt;em&gt;ShadownDOM&lt;/em&gt; do &lt;em&gt;Webkit&lt;/em&gt;. Mesmo que não sejam estas as especificações que teremos nos futuro, com certeza estas ideias farão parte de uma evolução eminente do desenvolvimento &lt;em&gt;front-end&lt;/em&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;Source-Maps-how-they-work-and-why-you-should-care-Thorsten-Lorenz&quot;&gt;
                &lt;a name=&quot;Source-Maps-how-they-work-and-why-you-should-care-Thorsten-Lorenz&quot; href=&quot;#Source-Maps-how-they-work-and-why-you-should-care-Thorsten-Lorenz&quot;&gt;&lt;/a&gt;Source Maps, how they work and why you should care - Thorsten Lorenz
              &lt;/h2&gt;
            
&lt;p&gt;Thorsten, criador do &lt;a href=&quot;https://github.com/thlorenz/es6ify&quot;&gt;es6ify&lt;/a&gt;, inicia sua apresentação explicando qual a utilidade dos &lt;em&gt;source maps&lt;/em&gt; e como ferramentas como &lt;a href=&quot;https://github.com/thlorenz/stack-mapper&quot;&gt;stack-mapper&lt;/a&gt; auxiliam na sua geração.&lt;/p&gt;

&lt;p&gt;A sequência da palestra mostra muitos exemplos e ferramentas que fazem uso de &lt;em&gt;source maps&lt;/em&gt;. O funcionamento de geradores de &lt;em&gt;source maps&lt;/em&gt; também é abordado.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Thorsten tem uma série de projetos relacionados com &lt;em&gt;source maps&lt;/em&gt; e sua palestra mostrou como tirar proveito de cada um deles.&lt;/p&gt;

              &lt;h2 id=&quot;Testing-Sucks-Leo-balter&quot;&gt;
                &lt;a name=&quot;Testing-Sucks-Leo-balter&quot; href=&quot;#Testing-Sucks-Leo-balter&quot;&gt;&lt;/a&gt;Testing Sucks - Leo balter
              &lt;/h2&gt;
            
&lt;p&gt;Leo Balter, um dos &lt;em&gt;contributors&lt;/em&gt; da jQuery e criador da &lt;a href=&quot;http://dexterjs.com/&quot;&gt;Dexter&lt;/a&gt;, inicia sua apresentação definindo um dos grandes desafios da programação JavaScript: MEH - &lt;em&gt;Multiple Environment Hell&lt;/em&gt;. São muitos navegadores e dispositivos em que nosso código JavaScript precisa funcionar. Uma das boas citações da palestra é a de que todo código sem testes é um código legado.&lt;/p&gt;

&lt;p&gt;É inerente a programação testar seu próprio código. Precisamos apenas definir como fazer isto de uma maneira que seja pouco monótona e o menos custosa possível. O essencial é que você comece a testar seu código de maneira unitária com base em TDD. A parte mais crítica e meno complexa de seu código deve ser sua porta de entrada.&lt;/p&gt;

&lt;p&gt;O que seguem são exemplos de suítes de testes escritas em &lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit&lt;/a&gt;. Balter demostrou a evolução de uma implementação juntamente com seus testes.&lt;/p&gt;

&lt;p&gt;Outro ponto importante na prática de testes é analisar o quanto do seu código está coberto por testes. Ferramentas como  Grunt e &lt;a href=&quot;https://github.com/taichi/grunt-istanbul&quot;&gt;Instanbul&lt;/a&gt; provêm um relatório completo com a porcentagem de instruções, &lt;em&gt;branches&lt;/em&gt;, linhas e funções testadas.&lt;/p&gt;

&lt;p&gt;O fechamento da palestra apresentou o conceito de &lt;em&gt;Continuous Integration&lt;/em&gt; e sua importância de uso em equipes de desenvolvedores. O &lt;a href=&quot;http://travis-ci.com&quot;&gt;Travis-CI&lt;/a&gt; também teve seu espaço na apresentação com a configuração de um projeto JavaScript no serviço.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Balter já é um evangelista de testes há muitos anos e seu conhecimento na área só parece amadurecer. A apresentação descomplicou o uso de testes e apontou as vantagens de seu uso. Além disto, respondeu uma das principais dúvidas que tenho ouvido: por onde começar a testar.&lt;/p&gt;

              &lt;h2 id=&quot;Death-to-cookies-long-live-JSON-Web-Tokens-Matias-Woloski-e-Jose-Romaniello&quot;&gt;
                &lt;a name=&quot;Death-to-cookies-long-live-JSON-Web-Tokens-Matias-Woloski-e-Jose-Romaniello&quot; href=&quot;#Death-to-cookies-long-live-JSON-Web-Tokens-Matias-Woloski-e-Jose-Romaniello&quot;&gt;&lt;/a&gt;Death to cookies, long live JSON Web Tokens - Matias Woloski e Jose Romaniello
              &lt;/h2&gt;
            
&lt;p&gt;Nos anos 90 a vida era muito fácil. Havia cliente fazia autenticação com o servidor e a partir disto esta autenticação era persistida. Em 2000, há o surgimento das &lt;em&gt;intranets&lt;/em&gt; apoiadas em &lt;em&gt;tokens&lt;/em&gt; de autenticação.&lt;/p&gt;

&lt;p&gt;Na atualidade, as aplicações possuem muitos outros componentes e surge então o problema de autenticação nas &lt;em&gt;single pages aplications&lt;/em&gt;. O alvo da palestra passa a ser a discussão de como cuidar da autenticação em uma aplicação AngularJS: Cookies ou Tokens.&lt;/p&gt;

&lt;p&gt;Os problemas dos &lt;em&gt;cookies&lt;/em&gt; são os seguintes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exclusivos de um domínio e portanto logo enfretamos o problema de CORS.&lt;/li&gt;
&lt;li&gt;cookies são específicos para cada &lt;em&gt;framework&lt;/em&gt; de &lt;em&gt;back-end&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;sucessíveis a ataques de CSRF.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A proposta é o uso de &lt;a href=&quot;http://jwt.io&quot;&gt;JSON Web Token&lt;/a&gt; (&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-18&quot;&gt;rascunho da especificação&lt;/a&gt;). Uma aplicação de exemplo escrita em Express e usando o módulo &lt;a href=&quot;https://github.com/auth0/express-jwt&quot;&gt;Express-JWT&lt;/a&gt; é apresentada.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/auth0/death-to-cookies-jsconfuy&quot;&gt;Slides da palestra&lt;/a&gt;&lt;/p&gt;

              &lt;h2 id=&quot;Distributed-Applications-in-Node-js-Angel-quot-Java-quot-Lopez&quot;&gt;
                &lt;a name=&quot;Distributed-Applications-in-Node-js-Angel-quot-Java-quot-Lopez&quot; href=&quot;#Distributed-Applications-in-Node-js-Angel-quot-Java-quot-Lopez&quot;&gt;&lt;/a&gt;Distributed Applications in Node.js - Angel &amp;quot;Java&amp;quot; Lopez
              &lt;/h2&gt;
            
&lt;p&gt;Angel inicia sua apresentação mostrando alguns conceitos e experimentos escritos por ele em Node.js. Aplicações distribuídas são aquelas que executam em múltiplas máquinas interligadas por uma rede.&lt;/p&gt;

&lt;p&gt;As razões de uso do Node.js são justificadas pelo seu suporte a redes, &lt;em&gt;built-in modules&lt;/em&gt;  e pelo seu ecosistema.&lt;/p&gt;

&lt;p&gt;A base de um sistema distribuído é a troca de mensagens. Angel apresenta uma série de projetos seus relacionados com o tema: &lt;a href=&quot;https://github.com/ajlopez/ObjectStream&quot;&gt;ObjectStream&lt;/a&gt;, &lt;a href=&quot;https://github.com/ajlopez/SimpleMessages&quot;&gt;SimpleMessages&lt;/a&gt;, &lt;a href=&quot;https://github.com/ajlopez/SimpleRemote&quot;&gt;SimpleRemote&lt;/a&gt;, &lt;a href=&quot;https://github.com/ajlopez/SimpleBroadcast&quot;&gt;SimpleBroadcast&lt;/a&gt; e &lt;a href=&quot;https://github.com/ajlopez/SimpleQueue&quot;&gt;SimpleQueue&lt;/a&gt;, &lt;a href=&quot;https://github.com/ajlopez/SimpleBus&quot;&gt;SimpleBus&lt;/a&gt;, &lt;a href=&quot;https://github.com/ajlopez/AjFabriqNode&quot;&gt;AjFabriqNode&lt;/a&gt;, &lt;a href=&quot;https://github.com/ajlopez/SimpleActors&quot;&gt;SimpleActors&lt;/a&gt; dentre outros.&lt;/p&gt;

&lt;p&gt;Os desafios de se manter múltiplas máquinas são: comunicação, gerenciar &lt;em&gt;jobs&lt;/em&gt; e resiliência. Por fim, uma série de experimentos é mostrado.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Angel fez uma abordagem bastante humorada e simplificada de um tópico bastante interessante que tem raízes bastante acadêmicas. Vale a pena conferir sua postagem &lt;a href=&quot;http://ajlopez.wordpress.com/2013/05/30/aplicaciones-distribuidas-y-node-js&quot;&gt;Distributed Applications and Node.js&lt;/a&gt; que explica minuciosamente toda a palestra.&lt;/p&gt;

              &lt;h2 id=&quot;Why-Bacon-is-actually-good-for-your-health-Leonardo-Garcia-e-Sergio-Gianazza&quot;&gt;
                &lt;a name=&quot;Why-Bacon-is-actually-good-for-your-health-Leonardo-Garcia-e-Sergio-Gianazza&quot; href=&quot;#Why-Bacon-is-actually-good-for-your-health-Leonardo-Garcia-e-Sergio-Gianazza&quot;&gt;&lt;/a&gt;Why Bacon is actually good for your health - Leonardo Garcia e Sergio Gianazza
              &lt;/h2&gt;
            
&lt;p&gt;A apresentação é a respeito de &lt;em&gt;Functional Reactive Programming (FRP)&lt;/em&gt; utilizando a biblioteca &lt;a href=&quot;https://github.com/baconjs/bacon.js/tree/master&quot;&gt;Bacon.js&lt;/a&gt;. O paradigma FRP é baseado na represetação de um valor que varia em um espaço de tempo. Uma &lt;em&gt;event stream&lt;/em&gt; é uma coleção de eventos que acontece ao longo de um tempo. Simplificando, é como um cano que, ao invés de água, recebe eventos. A media que o evento flui pela &lt;em&gt;stream&lt;/em&gt;, se este não for assitido, é perdido.&lt;/p&gt;

&lt;p&gt;FRP merece nossa anteção pelos seguintes motivos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Permitir a composição de eventos.&lt;/li&gt;
&lt;li&gt;Podemos tratar nossas coleções utilizando programação funcional.&lt;/li&gt;
&lt;li&gt;Alto level de abstração que nos permite expressar mais o &amp;quot;o que&amp;quot; ao invés de &amp;quot;como&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As &lt;em&gt;streams&lt;/em&gt; permitem a aplicações de funções já bastante conhecidas como &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;filter&lt;/code&gt; dentro outras.&lt;/p&gt;

&lt;p&gt;O funcionamento da biblioteca Bacon.js foi mostrado através de um fluxo de &lt;em&gt;ticks&lt;/em&gt; que resulta em um relógio completo com suporte a alarme. Outras duas implementações integradas com Backbone e Angular são mostradas justificando as múltiplas possibilidades de uso da biblioteca.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;É essencial justificar o uso de novos paradigmas, melhor ainda se puderem interagir com o que já utilizamos atualmente. Os exemplos com Backbone e Angular foram excelentes para isto. A apresentação fluiu bem e me provocou a investigar e implementar código usando o paradigma. Ótimo trabalho.&lt;/p&gt;

              &lt;h2 id=&quot;A-merger-of-the-Browser-and-Operating-System-Nick-Desaulniers&quot;&gt;
                &lt;a name=&quot;A-merger-of-the-Browser-and-Operating-System-Nick-Desaulniers&quot; href=&quot;#A-merger-of-the-Browser-and-Operating-System-Nick-Desaulniers&quot;&gt;&lt;/a&gt;A merger of the Browser and Operating System - Nick Desaulniers
              &lt;/h2&gt;
            
&lt;p&gt;Nick, trabalha na Mozilla no projeto do FirefoxOS, sua apresentação surge de um questonamento para a platéia: tudo aquilo que você vê no computador pode ser feito em aplicações que funcionam em navegadores.&lt;/p&gt;

&lt;p&gt;Nick observa o quanto de poder nossos sistema operacionais dão para aplicações que instalamos. O que pensar a respeito de uma aplicação que acessa nosso sistema de arquivos ou recursos via rede. Devíamos ter medo de fazer &lt;em&gt;download&lt;/em&gt; de novas aplicações.&lt;/p&gt;

&lt;p&gt;Atualmente, é totalmente justificável pensar em aplicações escritas inteiramente em JavaScript, a linguagem se tornou cem vezes mais rápido desde 2006. Nick apresentou o asm.js também e sua aplicação em jogos como Banana Bread e Unreal Enfine 3 e &lt;a href=&quot;https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/&quot;&gt;4&lt;/a&gt;. Outros exemplos mais foram mostrados apoiando a performance da linguagem.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A missão da Mozilla tenta trazer &lt;em&gt;web&lt;/em&gt; para o &lt;em&gt;desktop&lt;/em&gt; através do FirefoxOS. Assim como o Google está trazendo o ChromeOS. Os resultados de vendas de ambos os produtos já demonstram sucesso.&lt;/p&gt;

              &lt;h2 id=&quot;The-Better-Parts-Douglas-Crockford&quot;&gt;
                &lt;a name=&quot;The-Better-Parts-Douglas-Crockford&quot; href=&quot;#The-Better-Parts-Douglas-Crockford&quot;&gt;&lt;/a&gt;The Better Parts - Douglas Crockford
              &lt;/h2&gt;
            
&lt;p&gt;Autor do livro JavaScript: The Good Parts, Douglas Crockford sobe ao palco contando a história do autor de outro livro, O Pequeno Príncipe.&lt;/p&gt;

&lt;p&gt;Se uma funcionalidade é útil e ao mesmo tempo perigosa, devemos ficar com a funcionalidade mais útil. Douglas brinca que não somos pagos por usar todas as partes de uma linguagem e que uma boa linguagem tem a capacidade de ensinar algo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eu já fiz todos os erros que você pode fazer escrevendo JavaScript. - Douglas Crockford&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta experiência guiou a criação do JSLint que então passou a lhe ensinar algumas coisas. Surgem então alguns argumentos contra as boas partes, dentre eles, que cada funcionalidade é útil e é um direito poder utiliza-la.&lt;/p&gt;

&lt;p&gt;Muitas das funcionalidades da linguagem estão lá unicamente para induzir ao erro. Apesar disto, é necessário poder escrever bons programas utilizando JavaScript.&lt;/p&gt;

&lt;p&gt;Segundo Douglas, aqueles que não usam ponto e virgula, não passam de iniciantes. Existem dois tempos envolvidos na escrita de código: escrever e fazer o código funcionar de acordo. Sempre se leva tempo para se codificar bem.&lt;/p&gt;

&lt;p&gt;A parte mais esperada da apresentação são as melhores partes da ES6:
- &lt;a href=&quot;http://bbenvie.com/articles/2013-01-06/JavaScript-ES6-Has-Tail-Call-Optimization&quot;&gt;&lt;em&gt;Proper Tail Calls&lt;/em&gt;&lt;/a&gt;
- &lt;em&gt;Rest&lt;/em&gt; e &lt;em&gt;spread&lt;/em&gt;
- Módulos&lt;/p&gt;

&lt;p&gt;Douglas explica que há muitos anos deixou de usar &lt;code&gt;new&lt;/code&gt; em favor de &lt;code&gt;Object.create&lt;/code&gt; e que ultimamente abandonou por completo o uso de &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A construção de laço &lt;em&gt;for&lt;/em&gt; também foi alvo do abandono em favor do uso dos métodos de &lt;em&gt;array&lt;/em&gt;. Em especial no ES6, graças a &lt;em&gt;Proper Tail Calls&lt;/em&gt;, o &lt;code&gt;while&lt;/code&gt; pode ser deixado de lado.&lt;/p&gt;

&lt;p&gt;Douglas acredita que uma das piores partes da nova especificação do ES6 serão as classes. Os argumetos são baseados em que a herança clássica é dificil de manter e desnecessária em uma linguagem como JavaScript em que objetos podem ser criados seguindo a demanda. A herança por protótipos fazia todo o sentido em 1995, não são necessárias. Objetos literias devem ser criados através de funções.&lt;/p&gt;

&lt;p&gt;O que segue são comparações entre JavaScript e funcionalidades de outras linguagens. Uma ressalva é que alguns dos erros do JavaScript são por culpa de outros padrões adotados que continham erros, como &lt;em&gt;Binary Floating Point&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A responsabilidade do programador diz respeito as pessoas que utilizam seu trabalho. Outras responsabilidades envolvem trabalhar em equipe e gerenciar seu trabalho.&lt;/p&gt;

&lt;p&gt;O conselho final foi para que ninguém deixe &lt;em&gt;bugs&lt;/em&gt; no código.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Não existe outro palestrante que possa me deixar tão frustrado quanto este. Concordo com muitas das suas opiniões e reconheço a função e importância do seu livro na época em que foi escrito. Mas a sua opinião inflexível e muitas vezes grosseira joga tudo por terra.&lt;/p&gt;

&lt;p&gt;Objetos gerados por funções são órfãos. Classes são abstrações extremamente úteis para identificar e organizar código. Pegue como exemplo o padrão MVC: Jeremy fez um trabalho fantástico com Backbone.js e isto justifica completamente a necessidade de classes na linguagem.&lt;/p&gt;

&lt;p&gt;Veja, não precisamos fazer tudo com classes. O mesmo Jeremy não fez uso deste tipo de abstração para manipular coleções de dados na Underscore.js.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Saiba que também há cobertura do &lt;a href=&quot;primeiro-dia-jsconf-uy.html&quot;&gt;primeiro dia&lt;/a&gt; e da &lt;a href=&quot;segundo-dia-jsconf-uy-parte-1.html&quot;&gt;primeira parte deste mesmo dia de evento&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A minha opinião é que o &lt;em&gt;keynote&lt;/em&gt; do evento esteve ontem, neste mesmo palco, falando sobre Backbone.js. Outros bons palestrantes foram os que abordaram &lt;em&gt;Promises&lt;/em&gt; e o show de simplicidade e habilidade do substack. Por fim, os amigos do Brasil representaram muito bem nossa comunidade. O evento estava impecável e foi um prazer trocar figurinhas por aqui.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Mar 2014 00:00:00 -0300</pubDate>
        <link>http://jcemer.com/segundo-dia-jsconf-uy-parte-2.html</link>
        <guid isPermaLink="true">http://jcemer.com/segundo-dia-jsconf-uy-parte-2.html</guid>
      </item>
    
      <item>
        <title>Live posting do segundo dia da JSConfUY - parte 1</title>
        <description>&lt;p&gt;Cobertura comentada da manhã do segundo dia da JSConfUY 2014. Não deixe de ler a &lt;a href=&quot;primeiro-dia-jsconf-uy.html&quot;&gt;cobertura do primeiro dia&lt;/a&gt; e a &lt;a href=&quot;segundo-dia-jsconf-uy-parte-2.html&quot;&gt;parte 2 do segundo dia de evento&lt;/a&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;Tiny-modules-on-the-frontend-James-Halliday&quot;&gt;
                &lt;a name=&quot;Tiny-modules-on-the-frontend-James-Halliday&quot; href=&quot;#Tiny-modules-on-the-frontend-James-Halliday&quot;&gt;&lt;/a&gt;Tiny modules on the frontend - James Halliday
              &lt;/h2&gt;
            
&lt;p&gt;Conhecido como &lt;a href=&quot;https://twitter.com/substack%E2%80%8E&quot;&gt;@substack&lt;/a&gt;, Halliday tem o título de maior número de pacotes publicados no NPM, gerenciador de pacotes do Node.js.&lt;/p&gt;

&lt;p&gt;A palestra inicia com a justificativa de que aplicações podem ser compostas por pequenos módulos e um bom exemplo daquilo que pode ser um módulo são os &lt;em&gt;polyfills&lt;/em&gt;. A partir do momento que você desenvolve módulos no estilo do node.js (usando &lt;code&gt;require()&lt;/code&gt;), ferramentas como &lt;a href=&quot;https://github.com/substack/node-browserify&quot;&gt;browserify&lt;/a&gt;, criação do substack, podem ser usadas para empacotar seus módulos permitindo que sejam usados no &lt;em&gt;front-end&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A principal vantagem é poder usar toda a organização e padrões adotados pelo node.js e escrever código que, quando adequado, possa ser executado tanto no &lt;em&gt;front-end&lt;/em&gt; quanto no &lt;em&gt;back-end&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;James mostrou alguns de seus pequenos módulos preferidos em ação, dentre eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/observable&quot;&gt;observable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/insert-css&quot;&gt;insert-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/class-list&quot;&gt;class-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/baudio&quot;&gt;baudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;A palestra teve muito &lt;em&gt;live conding&lt;/em&gt;. Substack tem uma capacidade incrível de raciocinar e escrever, não é por nada que ele possui mais de três centenas de módulos publicados. Todos os exemplos focaram em ilustrar como uma aplicação pode ser construída com base em módulos com responsabildiades bem definidas.&lt;/p&gt;

&lt;p&gt;O desenvolvimento web já está com os dois pés na modularização, se você ainda está por fora do assunto, aconselho que confira &lt;a href=&quot;tableless.com.br/modularizacao-em-javascript&quot;&gt;Modularização em JavaScript&lt;/a&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;Be-MEAN-Jean-Carlo-Nascimento&quot;&gt;
                &lt;a name=&quot;Be-MEAN-Jean-Carlo-Nascimento&quot; href=&quot;#Be-MEAN-Jean-Carlo-Nascimento&quot;&gt;&lt;/a&gt;Be MEAN - Jean Carlo Nascimento
              &lt;/h2&gt;
            
&lt;p&gt;Suissa, como é conhecido, é um grande evangelista do &lt;em&gt;stack&lt;/em&gt; MEAN no Brasil. A proposta é a escrita de aplicações utilizando o máximo possível de JavaScript. O &lt;em&gt;stack&lt;/em&gt; compreende, na ordem das letras de seu nome: MongoDB, Express, Angular e Node.js.&lt;/p&gt;

&lt;p&gt;O sitema de gerenciamento de banco de dados MongoDB é não relacional e permite que dados em formato JSON sejam traduzidos automaticamente e armazenados. MongoDB tem a características de escalar com facilidade. Uma série de conceitos e outros mecanismos permitem utilizar mais de uma instância de máquina com tolerância a falhas. O sistema permite ainda o uso de GridFS, um sistema de arquivos distribuído baseado em mémoria, para reduzir significativamente o acesso a disco.&lt;/p&gt;

&lt;p&gt;A principal mudança de paradigma é deixar de lado a modelagem dos relacionamentos do banco de dados e focar nas perguntas e respostas que se espera extrair dos dados.&lt;/p&gt;

&lt;p&gt;As demais tecnologias são apresentadas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js:  A plataforma  é utilizada no &lt;em&gt;back-end&lt;/em&gt; graças a sua característica de I/O não bloqueante&lt;/li&gt;
&lt;li&gt;Express: &lt;em&gt;framework&lt;/em&gt; para escrita de aplicações em Node.js&lt;/li&gt;
&lt;li&gt;Angular: &lt;em&gt;framework front-end&lt;/em&gt; para escrita de aplicações caracterizado por ser &lt;em&gt;two-way data-binding&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;A palestra atende seu propósito de apresentar as tecnologias e suas particularidades. É tentador observar a quantidade de recursos que já temos acesso via JavaScript. Não acredito que toda a aplicação deve utilizar necessariamente este &lt;em&gt;stack&lt;/em&gt;, mas com certeza muitas aplicações podem se beneficiar de alguma das tecnologias.&lt;/p&gt;

              &lt;h2 id=&quot;JavaScript-Security-myths-fallacies-and-anti-patterns-Joe-Petterson&quot;&gt;
                &lt;a name=&quot;JavaScript-Security-myths-fallacies-and-anti-patterns-Joe-Petterson&quot; href=&quot;#JavaScript-Security-myths-fallacies-and-anti-patterns-Joe-Petterson&quot;&gt;&lt;/a&gt;JavaScript Security: myths, fallacies and anti-patterns - Joe Petterson
              &lt;/h2&gt;
            
&lt;p&gt;Joe justifica que não pensamos o suficiente em segurança. Nosso principal desafio é considerar o ambiente do cliente como nosso ambiente de execução.&lt;/p&gt;

&lt;p&gt;Os conceitos de segurança no &lt;em&gt;front-end&lt;/em&gt; estão ficando cada vez mais complexos. Várias das técnicas apresentadas estão relacionadas com tratar qualquer informação não confiável antes de adicioná-la a elementos HTML.&lt;/p&gt;

&lt;p&gt;Outros assuntos abordados foram: &lt;em&gt;LocalStore&lt;/em&gt;, &lt;em&gt;SesssionStorage&lt;/em&gt;, &lt;em&gt;WebWorkers&lt;/em&gt;, &lt;em&gt;Sandboxed iframes&lt;/em&gt;, &lt;em&gt;Offline Applications&lt;/em&gt; e &lt;em&gt;WebGL&lt;/em&gt;. O ataque mais interessante apresentado foi o de &lt;em&gt;WebGL&lt;/em&gt;: um modelo 3D com capacidade de explorar algum &lt;em&gt;driver&lt;/em&gt; de GPU vulnerável é enviado para o cliente em uma tentativa de executar código em &lt;em&gt;kernel mode&lt;/em&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;O conteúdo da palestra foi bastante vasto e denso, até o momento, foi a apresentação mais difícil de acompanhar. Todavia, os &lt;em&gt;slides&lt;/em&gt; são (TODO: adicionar o hiperlink) uma fonte de estudo muito boa.&lt;/p&gt;

              &lt;h2 id=&quot;MontageJS-Benoit-Marchant&quot;&gt;
                &lt;a name=&quot;MontageJS-Benoit-Marchant&quot; href=&quot;#MontageJS-Benoit-Marchant&quot;&gt;&lt;/a&gt;MontageJS - Benoit Marchant
              &lt;/h2&gt;
            
&lt;p&gt;Benoit é criador do &lt;em&gt;framework&lt;/em&gt; HTML5 &lt;a href=&quot;http://montagejs.org&quot;&gt;MontageJS&lt;/a&gt; e trabalhou por dez anos para a Apple. A despeito dos desafios com o DOM e custos de renderização de CSS, Benoit defende a máxima de que a experiência do usuário é a chave.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;framework&lt;/em&gt; disponibiliza uma estruta &lt;em&gt;MVC&lt;/em&gt; calcada em componentes. O &lt;em&gt;flow&lt;/em&gt; da aplicação é baseado em receber &lt;em&gt;input&lt;/em&gt;, processar a lógica e renderizar. Todo este processo precisa ser rápido o suficiente para não prejudicar a performance. MontageJS consegue mitigar este problema desacoplando a lógica da renderização.&lt;/p&gt;

&lt;p&gt;A apresentação foi recheada de exemplos enfatizando a experiência do usuário e a organização das aplicações em componentes.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Os conceitos e filosofias apresentados na palestra foram muito bons. Mas nada disto é novidade e se aventurar em um &lt;em&gt;framework&lt;/em&gt; com uma pequena comunidade pode não ser uma boa ideia. Mesmo assim, para quem se interessar &lt;a href=&quot;http://renaun.com/blog/2013/05/my-first-montagejs-application&quot;&gt;My First MontageJS Application&lt;/a&gt; apresenta muito bem o &lt;em&gt;framework&lt;/em&gt; e de quebra rascunha uma aplicação simples.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Não deixe de ler a &lt;a href=&quot;primeiro-dia-jsconf-uy.html&quot;&gt;cobertura do primeiro dia&lt;/a&gt; e a &lt;a href=&quot;segundo-dia-jsconf-uy-parte-2.html&quot;&gt;parte 2 do segundo dia de evento&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Mar 2014 00:00:00 -0300</pubDate>
        <link>http://jcemer.com/segundo-dia-jsconf-uy-parte-1.html</link>
        <guid isPermaLink="true">http://jcemer.com/segundo-dia-jsconf-uy-parte-1.html</guid>
      </item>
    
      <item>
        <title>Live posting do primeiro dia da JSConfUY</title>
        <description>&lt;p&gt;Cobertura comentada sobre o primeiro dia da JSConfUY 2014. Confira também o segundo dia de evento dividido em &lt;a href=&quot;segundo-dia-jsconf-uy-parte-1.html&quot;&gt;parte 1&lt;/a&gt; e &lt;a href=&quot;segundo-dia-jsconf-uy-parte-2.html&quot;&gt;parte 2&lt;/a&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;We-Play-Guillermo-Rauch&quot;&gt;
                &lt;a name=&quot;We-Play-Guillermo-Rauch&quot; href=&quot;#We-Play-Guillermo-Rauch&quot;&gt;&lt;/a&gt;We Play - Guillermo Rauch
              &lt;/h2&gt;
            
&lt;p&gt;Guillermo, conhecido pelo &lt;a href=&quot;http://socket.io&quot;&gt;socket.io&lt;/a&gt; dentre outros vários projetos &lt;em&gt;open source&lt;/em&gt;, é um dos &lt;em&gt;keynotes&lt;/em&gt; do evento. Sua palestra inicia abordando um pouco da história do socket.io, que surgiu da frustração do difícil uso de outras ferramentas similares e teve como objetivo tornar simples o uso de WebSockets.&lt;/p&gt;

&lt;p&gt;O assunto principal são as novidades da versão 1.0.0-pre do socket.io que teve seu &lt;em&gt;release&lt;/em&gt; recenente. Nesta nova versão modularização foi levada a sério e todos os commits são testados automaticamente em IE6+, iPhone, iPad entre outros navegadores e dispositivos.&lt;/p&gt;

&lt;p&gt;Note que a API nativa de WebSockets aceita apenas a troca de mensagens no formato de &lt;em&gt;strings&lt;/em&gt;. A nova versão, além de suportar o formato JSON já presente na versão 0.x, também suporta &lt;em&gt;binary data&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O projeto &lt;a href=&quot;http://weplay.io&quot;&gt;http://weplay.io&lt;/a&gt;, título da sua palestra, é um ótimo exemplo do transporte de informações em formato binário em um jogo colaborativo. O jogo é emulado no servidor e cada &lt;em&gt;frame&lt;/em&gt; é enviado para os clientes em formato binário, o que é impressionante e extremamente performático.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Guillermo foi muito aplaudido por ser um nome importante da comunidade JavaScript. WebSockets é uma tecnologia incrível que infelizmente possui muitas implementações e problemas de suporte. Socket.io é um dos poucos projetos que efetivamente simplificou e popularizou a tecnologia. Foi uma honra assistir a apresentação de um dos seus criadores.&lt;/p&gt;

              &lt;h2 id=&quot;Jade-A-templating-language-Forbes-Lindesay&quot;&gt;
                &lt;a name=&quot;Jade-A-templating-language-Forbes-Lindesay&quot; href=&quot;#Jade-A-templating-language-Forbes-Lindesay&quot;&gt;&lt;/a&gt;Jade: A templating language - Forbes Lindesay
              &lt;/h2&gt;
            
&lt;p&gt;Sem muita cerimônia, Forbes logo explora um código escrito em HTML e seu equivalente em &lt;a href=&quot;http://jade-lang.com&quot;&gt;Jade&lt;/a&gt;. O que segue é a apresentação completa da sintaxe e &lt;em&gt;feaures&lt;/em&gt; da linguagem.&lt;/p&gt;

&lt;p&gt;Um dos pontos interessantes foi a demonstração de como é possível passar conteúdo JavaScript para ser renderizado nos &lt;em&gt;templates&lt;/em&gt; permitindo a geração dinâmica de HTML. Em favor do reuso, os &lt;em&gt;mixins&lt;/em&gt; e &lt;em&gt;layout templates&lt;/em&gt; foram apresentados. Outra funcionalidade interessante são os &lt;em&gt;filters&lt;/em&gt; que permitem, por exemplo, mesclar código Jade com markdown.&lt;/p&gt;

&lt;p&gt;O compilador do Jade foi descrito e defendido por ser bem desenvolvido e conter três estágios: &lt;em&gt;lexer&lt;/em&gt;, &lt;em&gt;parser&lt;/em&gt; e &lt;em&gt;compiler&lt;/em&gt;. A vantagem para o usuário é a fácil depuração do código.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Sou um grande admirador de linguagens que geram outras, por assim dizer. Mas apresentar uma nova linguagem em um evento deste porte inclui destacar os problemas que esta soluciona. O uso de uma linguagem ou tecnologia precisa ser bem justificado.&lt;/p&gt;

              &lt;h2 id=&quot;Building-for-scale-with-KrakenJS-Lenny-Markus&quot;&gt;
                &lt;a name=&quot;Building-for-scale-with-KrakenJS-Lenny-Markus&quot; href=&quot;#Building-for-scale-with-KrakenJS-Lenny-Markus&quot;&gt;&lt;/a&gt;Building for scale with KrakenJS - Lenny Markus
              &lt;/h2&gt;
            
&lt;p&gt;O objetivo do Kraken foi o de introduzir Node.js no PayPal. O &lt;a href=&quot;http://krakenjs.com&quot;&gt;Kraken.js&lt;/a&gt; é &lt;em&gt;Web Application Framework&lt;/em&gt;* apoiado em Express e que segue suas convenções. O &lt;em&gt;framework&lt;/em&gt; compreende uma série de módulos com funções específicas: Lusca, para segurança; Marara, para internacionalização; Kappa, que é um &lt;em&gt;proxy#&lt;/em&gt; NPM para manter módulos privados. Os módulos podem ser utilizados individualmente em aplicações escritas em Express.&lt;/p&gt;

&lt;p&gt;O Kraken teve sua infraestrutura definida em três meses e em mais quatro meses um projeto piloto foi codificado para substituir outro escrito em Java. O impressionante é que a equipe que escreveu o projeto piloto possuia apenas dois desenvolvedores contra doze do projeto anterior. As diferenças de números de linhas de código também impressionam positivamente. A função do projeto piloto foi adquirir credibilidade para a tecnologia Node.js no PayPal.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;O &lt;em&gt;framework&lt;/em&gt; teve uma adoção absurda no PayPal e eles já mantêm 20 aplicações escritas. A apresentação foi muito boa e o mais humilde dos ensinamentos foi: &amp;quot;Mantenha as convenções de &lt;em&gt;Open Source&lt;/em&gt; ao invés de reinventar suas próprias&amp;quot;.&lt;/p&gt;

              &lt;h2 id=&quot;Improving-client-side-apps-39-perfomance-with-Facebook-39-s-React-Jú-Gonçalves&quot;&gt;
                &lt;a name=&quot;Improving-client-side-apps-39-perfomance-with-Facebook-39-s-React-Jú-Gonçalves&quot; href=&quot;#Improving-client-side-apps-39-perfomance-with-Facebook-39-s-React-Jú-Gonçalves&quot;&gt;&lt;/a&gt;Improving client-side apps&amp;#39; perfomance with Facebook&amp;#39;s React - Jú Gonçalves
              &lt;/h2&gt;
            
&lt;p&gt;Jú Gonçalves inicia sua palestra com um de seus tweets que demonstra sua preocupação com performance. Em seguida, é apresentada uma explanação de como &lt;em&gt;frameworks&lt;/em&gt; MVW geralmente funcionam.&lt;/p&gt;

&lt;p&gt;O que faz o &lt;a href=&quot;http://facebook.github.io/react&quot;&gt;React&lt;/a&gt; diferente é que, em uma primeira análise, ele não se trata de um MVW &lt;em&gt;framework&lt;/em&gt;: não há &lt;em&gt;views&lt;/em&gt;, &lt;em&gt;controllers&lt;/em&gt; e similares.&lt;/p&gt;

&lt;p&gt;A chave do ganho de performance está relacionado com o fato de o React evitar acessar o DOM, o que ocasiona &lt;em&gt;repaints&lt;/em&gt; e &lt;em&gt;reflows&lt;/em&gt;. A biblioteca obtem informações do DOM através de uma abstração da &lt;em&gt;DOMTree&lt;/em&gt;: a &lt;em&gt;ComponentTree&lt;/em&gt;. Após uma série de processamentos, esta abstração pode ser consultada e atestar se é necessária alguma intervenção no DOM.&lt;/p&gt;

&lt;p&gt;O projeto &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt;, uma interface em ClojureScript para React também foi apresentado. Om alcança peformances mais interessantes ainda devido as características de imutabilidade das linguagens funcionais.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A palestra tem um nível técnico de tirar o fôlego. É necessário muito estudo para dominar o uso e entender o funcionamento interno de cada uma das ferramentas apresentadas.&lt;/p&gt;

              &lt;h2 id=&quot;Taking-Promises-Seriously-James-MacAulay&quot;&gt;
                &lt;a name=&quot;Taking-Promises-Seriously-James-MacAulay&quot; href=&quot;#Taking-Promises-Seriously-James-MacAulay&quot;&gt;&lt;/a&gt;Taking Promises Seriously - James MacAulay
              &lt;/h2&gt;
            
&lt;p&gt;&lt;em&gt;Promises&lt;/em&gt; surgiram de diferentes bibliotecas e propostas de especificações. O padrão mais aceito é o Promises/A+ e já há uma especificação rascunho no ES6: &lt;code&gt;function Promise() { [native code] }&lt;/code&gt;. Antes das &lt;em&gt;promises&lt;/em&gt;, o único jeito era usar &lt;em&gt;callbacks&lt;/em&gt; aninhadas.&lt;/p&gt;

&lt;p&gt;O uso de &lt;em&gt;promises&lt;/em&gt; é baseado na função &lt;code&gt;.then&lt;/code&gt;: &lt;em&gt;promises&lt;/em&gt; que seguem a especificação irão retornar um valor transformado em uma chamada de &lt;code&gt;.then&lt;/code&gt;. Desta forma, é possível aninhar chamadas de tal maneira que sua ordem afete o resultado final. É importante notar que o &lt;code&gt;Deferred&lt;/code&gt; retornado nas chamadas assíncronas da jQuery não segue esta premissa.&lt;/p&gt;

&lt;p&gt;Um uso interessante da API de &lt;em&gt;promises&lt;/em&gt;, é utilizar a função &lt;code&gt;race&lt;/code&gt; para definir um tempo limite de espera para que um valor fique &amp;quot;pronto&amp;quot;.&lt;/p&gt;

&lt;p&gt;É essencial que biblitoecas e &lt;em&gt;frameworks&lt;/em&gt; passem cada vez mais a aceitar valores de &lt;em&gt;promises&lt;/em&gt;. Para ajudar com esta tarefa, bibliotecas como &lt;a href=&quot;http://github.com/jamesmacaulat/kozu&quot;&gt;kozu&lt;/a&gt; permite tornar qualquer função passível de ser utilizada com promises. Assim podem usar underscore com coleções cujos valores sejam &lt;em&gt;promises&lt;/em&gt;, o que é muito interessante.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A palestra é cheia de boas sacadas em diversas bibliotecas e o conteúdo foi apresentado de maneira muito clara. Além disto, dominar &lt;em&gt;promises&lt;/em&gt; é essencial para todo desenvolvedor que queira evitar o &lt;code&gt;callback hell&lt;/code&gt; e explorar outras características poderosas.&lt;/p&gt;

              &lt;h2 id=&quot;Functional-JavaScript-Federico-Silva&quot;&gt;
                &lt;a name=&quot;Functional-JavaScript-Federico-Silva&quot; href=&quot;#Functional-JavaScript-Federico-Silva&quot;&gt;&lt;/a&gt;Functional JavaScript - Federico Silva
              &lt;/h2&gt;
            
&lt;p&gt;Uma linguagem é baseada em expressões primitivas, meios de combinação e de abstração. Com a definição de linguagem é que Federico inicia sua palestra.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript possibilita diferentes paradigmas mas não força o uso de algum.
- Jeremy Ashkenas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em JavaScript, funções são cidadãos de primeira classe, o que significa que funções são equivalentes a qualquer outro tipo de valor da linguagem, podendo ser atribuídas a variáveis, por exemplo. Ainda, em JavaScript, as funções são de alta ordem: uma chamada de função pode receber funções e retornar outras.&lt;/p&gt;

&lt;p&gt;Linguagens unicamente funcionais são bastante calcadas em imutabilidade. Pela caracterísica orientação a objetos do JavaScript, que tendem a manter estado e portanto são mutáveis, devemos tomar atenção.&lt;/p&gt;

&lt;p&gt;A sequência da palestra mostra uma série de conceitos e práticas de programação funcional. Muitos dos exemplos são escritos em &lt;a href=&quot;http://underscorejs.org&quot;&gt;Underscore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A conclusão é que, por programação funcional ser orientado ao processamento de dados, esta pode facilitar a vida do programador em muitos casos.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Este é um assunto do qual sou muito fã. Mesmo sem uma base funcional perfeita no JavaScript, (sem &lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot;&gt;Tail call optimization&lt;/a&gt;, por exemplo) bibliotecas como Underscore podem fazer valer a pena programar no paradgima funcional. Um livro ótimo para quem quiser se aprofundar no assunto é o Functional JavaScript do Michael Fogus.&lt;/p&gt;

&lt;hr&gt;

              &lt;h2 id=&quot;Promises-and-Generators-control-flow-utopia-Forbes-Lindesay&quot;&gt;
                &lt;a name=&quot;Promises-and-Generators-control-flow-utopia-Forbes-Lindesay&quot; href=&quot;#Promises-and-Generators-control-flow-utopia-Forbes-Lindesay&quot;&gt;&lt;/a&gt;Promises and Generators: control flow utopia - Forbes Lindesay
              &lt;/h2&gt;
            
&lt;p&gt;A palestra apresenta um cenário utilizando &lt;em&gt;callbacks&lt;/em&gt; para tratar um processamento assíncrono. A partir de várias implementações, a dificuldade e &lt;em&gt;workarounds&lt;/em&gt; para tratar erros e excessões é explicado.&lt;/p&gt;

&lt;p&gt;Além da definição de &lt;em&gt;promises&lt;/em&gt;, a palestra apresenta o método &lt;code&gt;.done&lt;/code&gt;. A máxima é que &lt;code&gt;.then&lt;/code&gt; é para &lt;code&gt;.done&lt;/code&gt; o que &lt;code&gt;.map&lt;/code&gt; é para &lt;code&gt;.forEach&lt;/code&gt;. Vale ressaltar que a especificação ES6 não inclui &lt;code&gt;.done&lt;/code&gt; e portanto é necessário um &lt;em&gt;polyfill&lt;/em&gt;. A justificativa de uso de &lt;em&gt;promises&lt;/em&gt; é possibilitar uma escrita de código descomplicada que possa facilmente tratar erros.&lt;/p&gt;

&lt;p&gt;A apresentação também abordou &lt;em&gt;generators&lt;/em&gt; que são funções que podem interromper o fluxo de sua execução para posteriormente seguir daquele mesmo ponto. A integração de &lt;em&gt;promises&lt;/em&gt; com &lt;em&gt;generators&lt;/em&gt; pode ser bastante interessante e possibilitar a escrita de códigos poderosos. Um bom exemplo são as construções possíveis quando usando bibliotecas como a &lt;a href=&quot;https://github.com/visionmedia/co&quot;&gt;co&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Forbes já havia palestrado mais cedo no evento e conseguiu convencer mais nesta segunda palestra. O assunto é interessante e foi muito bem apresentado. Em especial, &lt;a href=&quot;http://en.wikipedia.org/wiki/Generator_(computer_programming&quot;&gt;generators&lt;/a&gt; permitem sintaxes absurdamente expressivas.&lt;/p&gt;

              &lt;h2 id=&quot;Backbone-js-Jeremy-Ashkenas&quot;&gt;
                &lt;a name=&quot;Backbone-js-Jeremy-Ashkenas&quot; href=&quot;#Backbone-js-Jeremy-Ashkenas&quot;&gt;&lt;/a&gt;Backbone.js - Jeremy Ashkenas
              &lt;/h2&gt;
            
&lt;p&gt;Jeremy é criador do Backbone.js, Underscore.js e CoffeeScript, nada mais óbvio que seja um dos palestrantes mais esperados do evento.&lt;/p&gt;

&lt;p&gt;A apresenta apresenta o cenário atual de desenvolvimento. Há cinco anos atrás, um website não era tão ambicioso quanto os que estamos acostumados desenvolver. Por isto é que devemos levar a sério o uso de JavaScript, aplicações monolíticas não é a melhor maneira de se escrever código.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone.js&lt;/a&gt; nasceu de uma aplicação destinada a armazenar e compartilhar documentos de trabalho de jornalistas. A principal característica da biblioteca é não fazer do DOM a principal fonte de informações da aplicação e uma das filosofias é sempre se manter o mais minimalista possível. Toda nova funcionalidade do Backbone.js é implementada com base em casos de usos.&lt;/p&gt;

&lt;p&gt;O ponto mais fantástico é que Jeremy acredita que o código da biblioteca, mesmo que não necessariamente precise ser explorado pelo programador, deve ser simples o suficiente para ser lido sem impedimentos.&lt;/p&gt;

&lt;p&gt;Jeremy apresenta alguns dos seus &lt;em&gt;Backbone.js Patterns&lt;/em&gt; preferidos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adicionar métodos em &lt;em&gt;Models&lt;/em&gt; e &lt;em&gt;Collections&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Filtrar coleções no front-end da aplicação.&lt;/li&gt;
&lt;li&gt;Utilizar &lt;code&gt;listenTo&lt;/code&gt; para evitar &lt;em&gt;memory leaks&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Utilizar &lt;code&gt;_.debounce&lt;/code&gt; para evitar múltiplos &lt;em&gt;renders&lt;/em&gt; em espaços muito curtos de tempo.&lt;/li&gt;
&lt;li&gt;Dividir em lotes a geração de elementos e postergar sua criação e inserção no documento para ganhos de performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dentre outros padrões.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A palestra durou quase uma hora e valeu cada segundo. O Jeremy demonstra uma maturidade fora do comum no palco. E isto não é por nada. O nível de conhecimento e sua influência na comunidade JavaScript é inquestionável.&lt;/p&gt;

&lt;p&gt;Sua observação de que código se escreve para leitura e sua paciência em manter todos os seus projetos &lt;em&gt;open sources&lt;/em&gt; sempre atualizados é incrível. Melhor palestra do dia.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Confira também o segundo dia de evento dividido em &lt;a href=&quot;segundo-dia-jsconf-uy-parte-1.html&quot;&gt;parte 1&lt;/a&gt; e &lt;a href=&quot;segundo-dia-jsconf-uy-parte-2.html&quot;&gt;parte 2&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Mar 2014 00:00:00 -0300</pubDate>
        <link>http://jcemer.com/primeiro-dia-jsconf-uy.html</link>
        <guid isPermaLink="true">http://jcemer.com/primeiro-dia-jsconf-uy.html</guid>
      </item>
    
      <item>
        <title>Qual a dose certa de JavaScript</title>
        <description></description>
        <pubDate>Mon, 03 Feb 2014 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/qual-dose-certa-de-javascript.html</link>
        <guid isPermaLink="true">http://jcemer.com/qual-dose-certa-de-javascript.html</guid>
      </item>
    
      <item>
        <title>O grande desencontro do HTTP com o HTML</title>
        <description></description>
        <pubDate>Mon, 06 Jan 2014 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/o-grande-desencontro-http-com-o-html.html</link>
        <guid isPermaLink="true">http://jcemer.com/o-grande-desencontro-http-com-o-html.html</guid>
      </item>
    
      <item>
        <title>BrazilJS: O fantástico mundo do JavaScript</title>
        <description>&lt;p&gt;Foi com surpresa e grande satisfação que recebi no início deste ano o convite dos amigos &lt;a href=&quot;http://twitter.com/jaydson&quot;&gt;Jaydson&lt;/a&gt; e &lt;a href=&quot;http://twitter.com/felipenmoura&quot;&gt;Felipe&lt;/a&gt; para palestrar na maior conferência de Javascript do universo. No ano anterior, havia participado ativamente do evento, a Grifo havia colaborado desenvolvendo o website. Eu conhecia todos os bastidores do evento, faltava o palco.&lt;/p&gt;

&lt;p&gt;Concordo que já seja um pouco tarde, o evento ocorreu no mês de agosto, mas só agora senti que seria pertinente falar sobre o assunto. Lembro que, tão logo passou a excitação do convite, dei-me conta do tamanho da responsabilidade. Eu não sabia, mas seria anunciado como &lt;a href=&quot;http://jaydson.org/valorize-a-prata-da-casa&quot;&gt;prata da casa&lt;/a&gt;, sem palavras.&lt;/p&gt;

&lt;p&gt;Desde o início eu soube que queria apresentar conteúdo técnico. Sou formado em Ciências da Computação e muito por isto gosto de definir muito bem as ferramentas, abordagens e técnicas que utilizo. Sinto a falta desta prática no dia-a-dia do front-end.&lt;/p&gt;

&lt;p&gt;Pronto, esta seria minha palestra: &lt;strong&gt;um panorama sobre os paradigmas da linguagem terminando no calcanhar da modularização&lt;/strong&gt;. Dei um nome bonitinho e uma introdução falando sobre a ubiquidade da linguagem só para quebrar o gelo. Ao mesmo tempo, eu queria que, indiferente do nível de conhecimento, todos aproveitassem. Além do desafio de conseguir abordar o tema em quarenta minutos, eu consideraria também mais esta restrição.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Este foi meu primeiro grande evento, o público foi em torno de mil pessoas, é óbvio que eu estava um tanto ansioso e apreensivo já no primeiro dia. Pra ajudar um pouco, logo pela manhã, conversei sobre o uso do operador &lt;code&gt;new&lt;/code&gt; com o Crockford e ele foi sumariamente contra. Confesso que fiquei embaraçado, gosto muito de construtores e minha palestra falaria deles.&lt;/p&gt;

&lt;p&gt;Na tarde do primeiro dia, aproveitei para conversar um pouco com um dos caras que mais respeito quando se trata de JavaScript: Angus Croll, &lt;a href=&quot;https://speakerdeck.com/anguscroll/break-all-the-rulez&quot;&gt;o quebrador de regras&lt;/a&gt;. Mostrei e expliquei a ele todos os &lt;em&gt;slides&lt;/em&gt; e ele prestou atenção a cada detalhe. No fim, comentei que eu estava um tanto preocupado por apresentar algumas abordagens que, mesmo eu acreditando cegamente, conhecia quem as repudiasse. A resposta de Angus foi curta e muito boa: &amp;quot;Você fez a sua pesquisa e está muito bom, não se preocupe&amp;quot;.&lt;/p&gt;

&lt;p&gt;No segundo dia, subi no palco e apresentei o melhor conteúdo que eu poderia oferecer. Sei que não foi uma palestra perfeita, nunca será e este não era o objetivo. Mas a experiência foi ótima, o &lt;em&gt;feedback&lt;/em&gt; foi positivo e as críticas muito construtivas. Conheci muitos desenvolvedores desde então e tenho escrito e palestrado o máximo que posso. Tem sido um prazer.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Falando um tanto dos pontos polêmicos. Escolhi CoffeeScript por ser uma linguagem que usei para aprender muito de JavaScript e que até hoje não entendo o porquê do preconceito em torno. Também mostrei códigos escritos de diferentes maneiras, incluindo &lt;a href=&quot;https://github.com/rwaldron/idiomatic.js/pull/32&quot;&gt;Comma First&lt;/a&gt;, sou um exibicionista.&lt;/p&gt;

&lt;p&gt;Gosto de pensar que é preciso conhecer diferentes linguagens e maneiras de escrita de código, e neste último aspecto, não deixar de respeitar a um padrão já estabelecido.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Os slides da palestra estão no &lt;a href=&quot;https://speakerdeck.com/jcemer/o-fantastico-mundo-do-javascript&quot;&gt;Speaker Deck&lt;/a&gt; e o vídeo você confere abaixo.&lt;/p&gt;

&lt;div class=&quot;video-wrapper&quot;&gt;
  &lt;iframe src=&quot;http://www.youtube.com/embed/Zn7B-X0y5qs&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 20 Dec 2013 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/o-fantastico-mundo-do-javascript.html</link>
        <guid isPermaLink="true">http://jcemer.com/o-fantastico-mundo-do-javascript.html</guid>
      </item>
    
      <item>
        <title>Asset Pipeline: Rails Assets or let die</title>
        <description>&lt;p&gt;Já de início, deixe-me esclarecer duas coisas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Este post trata do &lt;a href=&quot;http://www.akitaonrails.com/2012/07/01/asset-pipeline-para-iniciantes&quot;&gt;Asset Pipeline do Ruby on Rails&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Considero o Asset Pipeline ainda o melhor &lt;a href=&quot;http://tableless.com.br/workflow-para-cuidar-dos-seus-assets&quot;&gt;workflow para gerência de assets, veja meus argumentos&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A motivação em escrever vêm de algumas conversas entre amigos, discussões no Twitter e sobretudo meus estudos para a palestra: &lt;a href=&quot;https://speakerdeck.com/jcemer/e-agora-virei-um-front-end-rails&quot;&gt;E agora, virei um front-end Rails!?&lt;/a&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;A-força-do-Node-js&quot;&gt;
                &lt;a name=&quot;A-força-do-Node-js&quot; href=&quot;#A-força-do-Node-js&quot;&gt;&lt;/a&gt;A força do Node.js
              &lt;/h2&gt;
            
&lt;p&gt;Começando com um pouco de embasamento. A maior aptidão do Node.js são as aplicações que demandam entrada e saída massiva de dados, em suma, para isto é que ele foi desenvolvido.&lt;/p&gt;

&lt;p&gt;Por outro lado, o Node.js tem sido adotado pela comunidade front-end como suporte para suas ferramentas há bastante tempo. A lista vai desde transpiladores e &lt;em&gt;parsers&lt;/em&gt; de JavaScript, pré-processadores de CSS a automatizadores de tarefas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Node.js é a ferramenta mais importante pro desenvolvedor front end.
  &lt;br&gt;&lt;a href=&quot;http://twitter.com/askoth&quot;&gt;Marcelo Oliveira&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

              &lt;h3 id=&quot;Gerenciamento-de-pacotes&quot;&gt;
                &lt;a name=&quot;Gerenciamento-de-pacotes&quot; href=&quot;#Gerenciamento-de-pacotes&quot;&gt;&lt;/a&gt;Gerenciamento de pacotes
              &lt;/h3&gt;
            
&lt;p&gt;Disponibilizar bibliotecas, frameworks ou qualquer outro tipo de código foi um dos maiores desafios do confeiteiro de HTML da era passada. Para disponibilizar código, o jeito era criar um website com uma área para download. Fizemos isto com a &lt;a href=&quot;http://ryejs.com&quot;&gt;Rye&lt;/a&gt; nos longínquos 2012.&lt;/p&gt;

&lt;p&gt;Nada mais óbvio que a medida que o NPM conquistasse o maior sucesso gerenciando pacotes do Node.js surgissem gerenciadores destinados a código front-end no geral. Surgiram vários: &lt;a href=&quot;http://jamjs.org/&quot;&gt;Jam&lt;/a&gt;, &lt;a href=&quot;http://component.io&quot;&gt;Component&lt;/a&gt; e &lt;a href=&quot;http://volojs.org&quot;&gt;Volo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sem dúvida, o gerenciador de pacotes de maior adoção até o momento foi o Bower. &lt;strong&gt;Toda a biblioteca, framework ou código front-end que se preze está no Bower&lt;/strong&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;Gerenciamento-de-pacotes-no-Asset-Pipeline&quot;&gt;
                &lt;a name=&quot;Gerenciamento-de-pacotes-no-Asset-Pipeline&quot; href=&quot;#Gerenciamento-de-pacotes-no-Asset-Pipeline&quot;&gt;&lt;/a&gt;Gerenciamento de pacotes no Asset Pipeline
              &lt;/h2&gt;
            
&lt;p&gt;É importante reparar que o Asset Pipeline é apenas um framework, de maneira alguma ele seria acompanhado por um gerenciador exclusivo de pacotes. Assim como o Ruby on Rails, o Asset Pipeline utiliza as gems do Ruby para empacotar dependências. Mas a discussão que surge é: &lt;strong&gt;são as gems o empacotamento mais adequado para código front-end?&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Alguns desenvolvedores já deixaram muito claro qual a sua opinião: &lt;a href=&quot;http://simplesideias.com.br/gerenciando-dependencias-client-side-com-bower&quot;&gt;caso seu pacote forneça apenas conteúdo para a interface, ele deve estar em um gerenciador específico tal como o Bower&lt;/a&gt;. O custo desta abordagem no Ruby on Rails implica em ter dois arquivos de configuração de dependências (sim, não temos como abandonar o Gemfile) e duas etapas de &lt;em&gt;install&lt;/em&gt; e &lt;em&gt;update&lt;/em&gt; de dependências. Sem contar que muita gente não quer depender do Bower para fazer o deploy.&lt;/p&gt;

&lt;p&gt;Uma das soluções apontadas é adicionar ao repositório de versionamento do projeto os pacotes baixados pelo Bower. Desculpe, mas se for o caso, prefiro continuar com o protocolo antigo de &lt;em&gt;download&lt;/em&gt; manual das dependências, um gerenciador de pacotes tem muitas mais funções que apenas esta.&lt;/p&gt;

              &lt;h3 id=&quot;Rails-Assets&quot;&gt;
                &lt;a name=&quot;Rails-Assets&quot; href=&quot;#Rails-Assets&quot;&gt;&lt;/a&gt;Rails Assets
              &lt;/h3&gt;
            
&lt;p&gt;O &lt;a href=&quot;https://rails-assets.org&quot;&gt;Rails Assets&lt;/a&gt; é uma fonte de gems que empacotam código de interface já disponíveis no Bower. É a solução perfeita. Uma orla de front-enders cadastra e atualiza seus pacotes no Bower e as gems se alimentam diretamente destes repositórios para criar uma &lt;strong&gt;versão compatível&lt;/strong&gt; com o Asset Pipeline.&lt;/p&gt;

&lt;p&gt;Quando me refiro a versão compatível, é importante que saiba que alguns códigos precisam de adaptações para que funcionem no Asset Pipeline. Pegando como exemplo uma &lt;a href=&quot;https://github.com/fancyapps/fancyBox/blob/master/source/jquery.fancybox.css#L97&quot;&gt;folha de estilo da Fancybox&lt;/a&gt;, todas as referências às imagens precisam de instruções especiais para preservar as estratégias de cache. O Rails Assets faz todas as conversões necessárias automaticamente.&lt;/p&gt;

&lt;p&gt;Muita biblioteca front-end já está registrada no Ruby Gems com a única função de ser usada pelo Asset Pipeline, e portanto mantendo a organização de arquivos e outros aspectos propostos pelo framework. O &lt;em&gt;core team&lt;/em&gt; do Ruby on Rails já faz isto há bastante tempo com a &lt;a href=&quot;https://github.com/rails/jquery-rails&quot;&gt;jQuery&lt;/a&gt;, por exemplo. Isto implica que &lt;strong&gt;outras gems que dependam da jQuery passem a usar o mesmo pacote&lt;/strong&gt;, e esta é a vantagem de se ter um único gerenciador de pacotes.&lt;/p&gt;

&lt;p&gt;O principal contra tempo de encapsular código front-end era a necessidade de se criar um repositório exclusivo e manter o código atualizado, o que já está resolvido com maestria pelo Rails Assets. É claro que o Rails Assets se trata de um produto beta, melhorias no seu processo de funcionamento com certeza ainda devem ser necessárias. Mais detalhes no &lt;a href=&quot;http://codetunes.com/2013/we-released-rails-assets&quot;&gt;blog post do seu lançamento&lt;/a&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;Abandonar-o-Asset-Pipeline&quot;&gt;
                &lt;a name=&quot;Abandonar-o-Asset-Pipeline&quot; href=&quot;#Abandonar-o-Asset-Pipeline&quot;&gt;&lt;/a&gt;Abandonar o Asset Pipeline
              &lt;/h2&gt;
            
&lt;p&gt;O Grunt.js, com todos os seus inúmeros plugins, já está muito próximo (ou talvez já tenha ultrapassado) das capacidades do Asset Pipeline. Acho fantástico quando diferentes linguagens e comunidades chegam a soluções equivalentes e passam a disputar palmo a palmo por espaço.&lt;/p&gt;

              &lt;h3 id=&quot;Half-Pipe&quot;&gt;
                &lt;a name=&quot;Half-Pipe&quot; href=&quot;#Half-Pipe&quot;&gt;&lt;/a&gt;Half Pipe
              &lt;/h3&gt;
            
&lt;p&gt;É óbvio que a esta altura já exista uma gem que se encarregue de trocar o Asset Pipeline por um workflow apoiado no Grunt.js e Bower, chama-se &lt;a href=&quot;https://github.com/d-i/half-pipe&quot;&gt;Half-pipe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A vantagem é que você vai poder fugir totalmente da discussão da maneira de usar o Bower e em como é errado empacotar código de interface em gems. Além disto, todas as ferramentas de front-end estarão disponíveis em primeira mão, nossos assets estarão a cuidados do Node.js.&lt;/p&gt;

&lt;p&gt;A desvantagem será a falta de integração dos seus assets com a aplicação, adeus estratégia &lt;em&gt;just works&lt;/em&gt; de gerência de &lt;em&gt;cache&lt;/em&gt;. Você até pode ter um plugin do Grunt que cuide disto, mas isto não vai influenciar no asset referenciado pelo &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; dos seus documentos HTML como acontece com o Asset Pipeline.&lt;/p&gt;

&lt;p&gt;Até o momento, o Half Pipe substitui por completo o Asset Pipeline, isto significa que outras gems como o Active Admin passarão a não funcionar. E pra finalizar, o deploy em serviços como o Heroku pode ficar bem mais complicado que o usual.&lt;/p&gt;

              &lt;h2 id=&quot;Conclusão&quot;&gt;
                &lt;a name=&quot;Conclusão&quot; href=&quot;#Conclusão&quot;&gt;&lt;/a&gt;Conclusão
              &lt;/h2&gt;
            
&lt;p&gt;O Ruby on Rails tem como uma das suas maiores filosofias &amp;quot;convenção sobre configuração&amp;quot;. Não é por acaso que ele já inclui um workflow para gerenciar os assets da aplicação: &lt;strong&gt;garantir boas práticas e agilidade no desenvolvimento&lt;/strong&gt;. Dito isto, não parece fazer sentido ter o trabalho de desativar o Asset Pipeline ou até mesmo configurar outro gerenciador de dependências que não seja aquele já utilizado.&lt;/p&gt;

&lt;p&gt;Aceite as escolhas tomadas por aqueles que cruzaram o caminho do Asset Pipeline ou o abandone. Digamos que até mesmo o extremo de desacoplar completamente os assets da sua aplicação pode ser uma boa ideia. Nestes casos, a escolha de ferramentas e frameworks para cada uma das partes fica a seu critério. O que você perde e ganha com isto vai depender da sua aplicação. Vale a pena?&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Dec 2013 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/asset-pipeline-rails-assets-or-let-die.html</link>
        <guid isPermaLink="true">http://jcemer.com/asset-pipeline-rails-assets-or-let-die.html</guid>
      </item>
    
      <item>
        <title>Modularização em JavaScript</title>
        <description></description>
        <pubDate>Mon, 09 Dec 2013 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/modularizacao-em-javascript.html</link>
        <guid isPermaLink="true">http://jcemer.com/modularizacao-em-javascript.html</guid>
      </item>
    
      <item>
        <title>Navegando com o teclado</title>
        <description>&lt;p&gt;Se analisarmos um pouco, à mesma época dos primórdios daquilo que se tornou a web, foi patenteado o mouse. Talvez por isto, estejamos tão acostumados a navegar com os cliques. Mas, muito antes dos ponteiros, eram as teclas que imperavam. O teclado é um dos mais antigos dispositivos de entrada de dados em computadores e com ele conseguimos ser bastante ágeis, mais até do que imaginamos.&lt;/p&gt;

&lt;p&gt;Há algumas semanas, uma troca de &lt;em&gt;tweets&lt;/em&gt; entre eu, &lt;a href=&quot;https://twitter.com/bitbonsai&quot;&gt;Mauricio Wolff&lt;/a&gt; e &lt;a href=&quot;https://twitter.com/danielfilho&quot;&gt;Daniel Filho&lt;/a&gt;, convergiu para &lt;strong&gt;quais os atalhos de teclado mais comuns&lt;/strong&gt; que os desenvolvedores devem dar suporte em páginas de internet e este será o principal assunto deste texto.&lt;/p&gt;

              &lt;h2 id=&quot;Atalhos-padrões&quot;&gt;
                &lt;a name=&quot;Atalhos-padrões&quot; href=&quot;#Atalhos-padrões&quot;&gt;&lt;/a&gt;Atalhos padrões
              &lt;/h2&gt;
            
&lt;p&gt;É importante conhecer os atalhos implementados pelos navegadores para tirar melhor proveito das suas funcionalidades. Saiba que veremos apenas alguns deles com a intenção de justificar e servir como suporte à criação de outros atalhos.&lt;/p&gt;

              &lt;h3 id=&quot;Deslocamento-da-página&quot;&gt;
                &lt;a name=&quot;Deslocamento-da-página&quot; href=&quot;#Deslocamento-da-página&quot;&gt;&lt;/a&gt;Deslocamento da página
              &lt;/h3&gt;
            
&lt;p&gt;Os mais naturais e agnósticos a sistema operacional e fabricante são: as setas para avançar e voltar uma linha, &lt;code&gt;espaço&lt;/code&gt; para descer uma página, &lt;code&gt;end&lt;/code&gt; (&lt;code&gt;Cmd + ↓&lt;/code&gt;) para chegar ao fim da página e &lt;code&gt;home&lt;/code&gt; (&lt;code&gt;Cmd + ↑&lt;/code&gt;) para voltar ao seu início.&lt;/p&gt;

              &lt;h3 id=&quot;Navegação-por-elementos-que-podem-receber-foco&quot;&gt;
                &lt;a name=&quot;Navegação-por-elementos-que-podem-receber-foco&quot; href=&quot;#Navegação-por-elementos-que-podem-receber-foco&quot;&gt;&lt;/a&gt;Navegação por elementos que podem receber foco
              &lt;/h3&gt;
            
&lt;p&gt;Alguns elementos da página permitem ao usuário navegar através deles com auxílio da tecla &lt;code&gt;tab&lt;/code&gt;. Os &lt;em&gt;links&lt;/em&gt;, botões e campos de entrada de dados são elementos que, por padrão, podem receber foco e fazer parte deste modo de navegação. Além disto, o atributo &lt;code&gt;tabindex&lt;/code&gt; pode ser utilizado para guiar a ordem da navegação e &lt;strong&gt;dar a capacidade de ganhar foco a qualquer elemento&lt;/strong&gt;.&lt;/p&gt;

              &lt;h2 id=&quot;Fluxos-alternativos&quot;&gt;
                &lt;a name=&quot;Fluxos-alternativos&quot; href=&quot;#Fluxos-alternativos&quot;&gt;&lt;/a&gt;Fluxos alternativos
              &lt;/h2&gt;
            
&lt;p&gt;É bastante importante introduzir um conceito empírico (leia-se, não tenho referências) de &lt;strong&gt;fluxo alternativo&lt;/strong&gt; de uma página de internet. Um fluxo alternativo é criado quando abrimos um &lt;em&gt;login&lt;/em&gt; flutuante, mostramos uma galeria de imagens em uma camada superior à página ou mostramos qualquer outro conteúdo de maneira semelhante.&lt;/p&gt;

&lt;p&gt;Os fluxos alternativos devem ser compostos por &lt;a href=&quot;#Navega%C3%A7%C3%A3o-por-elementos-que-podem-receber-foco&quot;&gt;elementos que possam receber foco&lt;/a&gt;, o que pode ser alcançado com o auxílio do atributo &lt;code&gt;tabindex&lt;/code&gt;. Saiba que o valor igual a &lt;code&gt;-1&lt;/code&gt; no atributo é usado para que este não participe da navegação por &lt;code&gt;tab&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;É imprescindível que quando o fluxo alternativo for ativado, o foco seja atribuído ao elemento, por exemplo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Definir atalhos de teclado é principalmente uma medida de usabilidade que influencia na acessibilidade do documento. Em via de regra, os atalhos irão facilitar o uso por pessoas sem acesso a &lt;em&gt;mouse&lt;/em&gt; ou &lt;em&gt;trackpad&lt;/em&gt; e que possuam problemas motores. Acessibilidade é um campo vasto e você pode começar por &lt;a href=&quot;http://www.slideshare.net/horacio.soares/frontin-rio-junho2013&quot;&gt;esta palestra do Horácio Soares&lt;/a&gt;.&lt;/p&gt;

              &lt;h3 id=&quot;Sair-de-um-fluxo&quot;&gt;
                &lt;a name=&quot;Sair-de-um-fluxo&quot; href=&quot;#Sair-de-um-fluxo&quot;&gt;&lt;/a&gt;Sair de um fluxo
              &lt;/h3&gt;
            
&lt;p&gt;A tecla &lt;code&gt;esc&lt;/code&gt; deve ser responsável por cancelar qualquer fluxo alternativo. É uma experiência bastante frustrante para o usuário ampliar uma imagem que toma toda a tela e não conseguir cancelar esta ação por meio da tecla &lt;code&gt;esc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Twitter Bootstrap&lt;/a&gt;, por exemplo, possui uma preocupação digna com este comportamento, o código abaixo foi extraído do componente de modal.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;keyup.dismiss.bs.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A implementação verifica se o código da tecla &lt;code&gt;esc&lt;/code&gt;, identificado pelo número 27, foi pressionado por meio de um evento de &lt;code&gt;keyup&lt;/code&gt;. Um exemplo mais desacoplado ainda utilizando jQuery:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;esc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;keyup.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;esc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;c1&quot;&gt;// handle action&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h3 id=&quot;Navegar-pelas-setas&quot;&gt;
                &lt;a name=&quot;Navegar-pelas-setas&quot; href=&quot;#Navegar-pelas-setas&quot;&gt;&lt;/a&gt;Navegar pelas setas
              &lt;/h3&gt;
            
&lt;p&gt;Galerias de fotos na forma de um fluxo alternativo são sempre acompanhadas de botões para avançar e retroceder a imagem. Nestes casos, é essencial que as setas do teclado também possam fazer este trabalho. Veja o código de exemplo com as teclas &lt;code&gt;left&lt;/code&gt; e &lt;code&gt;right&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;keyup.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;c1&quot;&gt;// handle action&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-10&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;c1&quot;&gt;// handle action&lt;/span&gt;
&lt;a name=&quot;line-11&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lembre-se que estes tratadores de eventos devem ser respectivamente definidos e desativados quando o fluxo ganha e perde foco. Em uma aplicação, pode ser útil a criação de eventos específicos, veja:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;$document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;keyup.observe&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;esc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;nx&quot;&gt;$document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;keyup&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O código dos fluxos se torna mais expressivo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;$document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;esckeyup.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;c1&quot;&gt;// handle action&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;$document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;leftkeyup.modal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;c1&quot;&gt;// handle action&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
              &lt;h2 id=&quot;Formulários&quot;&gt;
                &lt;a name=&quot;Formulários&quot; href=&quot;#Formulários&quot;&gt;&lt;/a&gt;Formulários
              &lt;/h2&gt;
            
&lt;blockquote&gt;
&lt;p&gt;Every textarea should let you submit comments by pressing cmd-enter or ctrl-enter. For every site that doesn&amp;#39;t support it, a kitten weeps. Here&amp;#39;s to making less kittens weep.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta é a descrição do projeto &lt;a href=&quot;https://github.com/dewski/cmd-enter&quot;&gt;cmd-enter&lt;/a&gt;. Diferente dos outros campos de um formulário, em que a tecla &lt;code&gt;Enter&lt;/code&gt; tem a função de enviar os dados, quando em um textarea, sua função é a de quebrar a linha. Nada mais justo que exista uma maneira de enviar o formulário quando em um textarea, e esta é convencionalmente a combinação de &lt;code&gt;Ctrl+Enter&lt;/code&gt; (&lt;code&gt;Cmd+Enter&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;line-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-2&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;
&lt;a name=&quot;line-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;line-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;$document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;keydown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;textarea&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KEYBOARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;metaKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctrlKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;line-7&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;a name=&quot;line-8&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;line-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/rPWhv/&quot;&gt;Experimente o funcionamento&lt;/a&gt;. Tenho certeza que se ainda não conhecia, passará a tentar a combinação em todos os próximos formulários que preencher, vicia.&lt;/p&gt;

              &lt;h2 id=&quot;Crie-seu-ecosistema&quot;&gt;
                &lt;a name=&quot;Crie-seu-ecosistema&quot; href=&quot;#Crie-seu-ecosistema&quot;&gt;&lt;/a&gt;Crie seu ecosistema
              &lt;/h2&gt;
            
&lt;p&gt;Aplicações de uso massivo possuem uma gama de atalhos bastante rica. A convenção é que a tecla &lt;code&gt;?&lt;/code&gt; mostre o mapa; tente pressionar no Gmail ou GitHub. É interessante notar que alguns dos atalhos do Gmail como o &lt;code&gt;J&lt;/code&gt; e &lt;code&gt;K&lt;/code&gt; são baseados no &lt;a href=&quot;http://www.vim.org&quot;&gt;VIM&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Confesso que ainda estou explorando a maneira de melhor tirar proveito dos atalhos de teclado no meu dia-a-dia (relaxa, &lt;a href=&quot;http://en.wikipedia.org/wiki/Konami_Code&quot;&gt;Konami Code&lt;/a&gt; eu conheço) e nos projetos que desenvolvo.&lt;/p&gt;

&lt;p&gt;A mensagem final? Vale bastante a pena se ater a definição de atalhos para garantir um experiência ainda mais rica para os usuários.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Nov 2013 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/navegando-com-o-teclado.html</link>
        <guid isPermaLink="true">http://jcemer.com/navegando-com-o-teclado.html</guid>
      </item>
    
      <item>
        <title>CSS on steroids</title>
        <description></description>
        <pubDate>Tue, 12 Nov 2013 00:00:00 -0200</pubDate>
        <link>http://jcemer.com/css-on-steroids.html</link>
        <guid isPermaLink="true">http://jcemer.com/css-on-steroids.html</guid>
      </item>
    
  </channel>
</rss>
